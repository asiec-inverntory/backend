enum Role {
    #отчеты о наличии оборудования по основным характеристикам;
    ADMINISTRATOR
#    отчеты о материальной ответственности лиц и закрепленном за ними оборудовании и его расположении
    ACCOUNTING
#    отчеты о закрепленном за ними оборудовании, его основных характеристиках и его месторасположении
    APPOINTED_PERSON
#    движение техники (жизненный цикл оборудования), назначения материально-ответственного лица и месторасположения,
#    формирование наряда на перемещения оборудования, отчеты о конфигурации оборудования
    ADMIN
#    перемещение техники (изменение ее месторасположения на основании наряда), отчеты по характеристикам и
#    конфигурации оборудования, материально ответственным лицам и месторасположению
    TECHNICAL_STAFF
}

enum  Status {
#    приемка оборудования от поставщиков на склад, назначение первичного материально-ответственного лица
#    (ответственного за склад), подготовка оборудования для передачи в эксплуатацию
    ACCEPTENCE
#    получение инвентарных номеров принятого оборудования в бухгалтерии, заполнение справочников номенклатуры,
#    печать штрих-кодов и их нанесение на оборудование
    COMING
#    назначение материально-ответственного лица (владельца), формирование акта передачи материальных ценностей,
#    формирование наряда на перемещение оборудования со склада на территорию материально-ответственного лица.
    TRANSER
#    передача оборудования другому материально-ответственному лицу с формированием акта передачи и
#    наряда на перемещение (от кого, исполнитель наряда, кому)
    MOVING
#    изменение состава оборудования оформляется актом и нарядом на комплектацию/разукомплектацию, лучше всего забить на этот этап
#    EQUIPMENT_DISMANTLING
#    перемещение оборудования в ремонтную мастерскую без переназначения материально-ответственного лица,
#    но с формированием наряда на безответственное перемещение и ремонт с назначением ответственного за ремонт лица
    REPAIR
#    передача оборудование на диагностику и ремонт во внешние организации (назначается ответственное
#    за связь с внешними поставщиками услуг лицо, оборудование
    DIAGNOSTIC
#    отслужившее свой срок оборудование попадает на склад списанной техники, оформляется списание в бухгалтерии
    WRITE_OFF
#    создается акт утилизации, заключается договор на утилизацию со сторонней организацией, оформляется наряд на утилизацию
    RECYCLING
}

enum EventType {
    D
}

enum OrderType {
#    перемещение оборудования из одного места в другое
    MOVING
#    передача оборудования другому лицу
    TRANSFER
#    компектация/ разукомпектация, если это делать то скорее всего будет какая то жесть так что проще вообще выкинуть этот этап да и наряд
#    EQUIPMENT_DISMANTLING
    REPAIR
    RECYCLE
}

type User {
    id: ID!
    username: String
    name: String
    surname: String
    last_name: String
    role: Role
    is_enabled: Boolean

    last_login: String
    created_at: String
    updated_at: String
    created_by: User
}

input UserInput {
    username: String
    name: String
    surname: String
    last_name: String
    role: String
}

type Building {
    id: ID!
    address: String
    building_identifier: String

    created_at: String
    updated_at: String
    created_by: User
    updated_by: User
}

input BuildingInput {
    address: String
    building_identifier: String
}

type Room {
    id: ID!
    number: Int
    flour: Int
    description: String
    appointment: String
    building: Building
    responsible: User

    created_at: String
    updated_at: String
    created_by: User
    updated_by: User
}

input RoomInput {
    number: Int
    floar: Int
    description: String
    appointment: String
}

type Position {
    id: ID!
    number: Int
    room: Room

    created_at: String
    updated_at: String
    created_by: User
    updated_by: User
}

input PositionInput {
    number: Int
}

type Equipment {
    id: ID!
    inventory_code: String
    room: Room
    child_equipment: Equipment
    is_atomic: Boolean
    appointment: String
    position: Position
    characteristic: [Characteristic]
    status: Status

    created_at: String
    updated_at: String
    created_by: User
    updated_by: User
}

input EquipmentInput {
    inventory_code: String
    is_atomic: Boolean
    appointment: String
    status: Status
}

type Attribute {
    id: ID!
    attribute: String
    description: String
}

input AtributeInput {
    attribute: String
    description: String
}

type Unit {
    id: ID!
    unit: String
    description: String
}

input UnitInput {
    unit: String
    description: String
}

type Characteristic {
    id: ID!
    attribute: Attribute
    value: String
    unit: Unit
}

type Event {
    id: ID!
    type: EventType
    data: String
}

type Order {
    id: ID!
    type: OrderType
    appointed: User
    equipment: Equipment
    from_position: Position
    to_position: Position
    from_room: Room
    to_room: Room
    from_user: User
    to_user: User

    created_at: String
    updated_at: String
    created_by: User
    updated_by: User
}

type RepairService {
    id: ID!
    name: String
    address: String
    telephone: String

    created_at: String
    updated_at: String
    created_by: User
    updated_by: User
}

input RepairServiceInput {
    name: String
    address: String
    telephone: String
}

type Repair {
    id: ID!
    equipment: Equipment
    repairService: RepairService
    appointed: User

    created_at: String
    updated_at: String
    created_by: User
    updated_by: User
}

 type Query {
    user(id: ID!):User
#     QR
#    encode(code: String): String
#    decode(image: String): String
 }

 type Mutation {
#     operation with user
     createUser(
         input: UserInput
     ):User
     disableUser(
       id: ID!
     ):User
     changePassword(
         id: ID!
         password: String!
     ): User
     updateUser(
         id: ID!
         input: UserInput
     ):User
     deleteUser(
         id: ID!
     ):Boolean
#     p[eration with building
     createBuilding(
         input: BuildingInput
     ):Building
     updateBuilding(
         id: ID!
         input: BuildingInput
     ):Building
     deleteBuilding(
         id: ID!
     ):Boolean
#    operation with room
     createRoom(
         input: RoomInput
         building: ID!
     ):Room
     updateRoom(
         id: ID!
         input: RoomInput
     ):Room
     deleteRoom(
         id: ID!
     ):Boolean
#    operation with position
     createPosition(
         input: PositionInput
         room: ID!
     ):Position
     updatePosition(
         id: ID!
         input: PositionInput
     ):Position
     deletePosition(
         id: ID!
     ):Boolean
#    operation with equipment
     createEquipment(
         input: EquipmentInput
         room: ID!
         child_equipment: ID
         position: ID
         characteristic: [ID]
     ):Equipment
     updateEquipment(
         id: ID!
         input: EquipmentInput
     ): Equipment
     deleteEquipment(
         id: ID!
     ):Boolean
#    operation with attribute
    createAtrribute(
        input: AtributeInput
    ):Attribute
     updateAttribute(
         id: ID!
         input: AtributeInput
     ):Attribute
     deleteAttribute(
        id: ID!
     ):Boolean
#    operation with unit
     createUnit(
         input: UnitInput
     ):Unit
     updateUnit(
         id: ID!
         input: UnitInput
     ):Unit
     deleteUnit(
         id: ID!
     ):Boolean
#     operation with Characteristic
     createCharacteristic(
         attribute: ID!
         value: String
         unit: ID
     ):Characteristic
     updateCharacteristic(
         value: String
     ): Characteristic
     deleteCharacteristic(
         id: ID!
     ):Boolean
#     operation with order
#     operatin with RepairService
     createRepairService(
         input: RepairServiceInput
     ):RepairService
     updateRepairService(
         id: ID!
         input: RepairServiceInput
     ):RepairService
     deleteRepairService(
         id: ID!
     ):Boolean
 }